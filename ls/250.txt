//
// Created by liu on 2023/5/4.
//
#include<iostream>
#include<string>
#include<algorithm>
#include<unordered_set>
#include<cstring>
#include<vector>

using namespace std;

const int N = 20;
int f[N][N];
int dfn[N], low[N], times;
int stk[N], top, id[N], scc_cnt, Size[N];
bool in_stk[N];
vector<vector<int>> res;

void targan(int u) {
    dfn[u] = low[u] = ++ times;
    stk[++ top] = u;
    in_stk[u] = true;
    for (int i = 0; i < 10; i ++) {
        if (f[u][i] == 1) {
            if (!dfn[i]) {
                targan(i);
                low[u] = min(low[u], low[i]);
            }else if (in_stk[i]) {
                low[u] = min(low[u], dfn[i]);
            }
        }
    }
    if (dfn[u] == low[u]) {
        ++ scc_cnt;
        int y;
        do {
            y = stk[top --];
            in_stk[y] = false;
            id[y] = scc_cnt;
            Size[scc_cnt] ++;
        } while (y != u);

    }
}

int main() {

    for (int i = 0; i < 10; i ++) {
        for (int j = 0; j < 10; j ++) {
            cin >> f[i][j];
        }
    }
    for (int i = 0; i < 10; i ++) {
        if (!dfn[i]) {
            targan(i);
        }
    }
    res.resize(11);
    for (int i = 0; i < 10; i ++) {
        res[id[i]].push_back(i);
    }
    for (auto & i : res) {
        if (i.empty()) {
            continue;
        }else if (i.size() == 10) {
            cout << "Strongly Connected Graph";
            return 0;
        }
    }
    for (int i = 0; i < res.size(); i ++) {
        for (int j = i + 1; j < res.size(); j ++) {
            if (!res[i].empty() && !res[j].empty() &&  res[i][0] > res[j][0]) {
                swap(res[i], res[j]);
            }
        }
    }
    for (auto & i : res) {
        if (!i.empty()) {
            for (auto & j : i) {
                cout << j + 1 << " ";
            }
            cout << endl;
        }
    }
}