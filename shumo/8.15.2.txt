from scipy.optimize import minimize
import numpy as np
import pandas as pd

data = pd.read_excel("8.15.2.xlsx", sheet_name=0, usecols="A:C", header=None)
data = np.array(data)
print(data)

x = data[:, 0]
y = data[:, 1]
z = data[:, 2]
xr = []
yr = []
zr = []
d = []
for i in range(0, 692):
    def fun():
        v = lambda r: ((r[0] - r[3]) ** 2 + (r[1] - r[4]) ** 2 + (r[2] - r[5]) ** 2) ** 0.5
        return v


    def con():
        cons = (
            {'type': 'eq',
             'fun': lambda r: r[5] / (r[3] ** 2 + r[4] ** 2) ** 0.5 - r[2] / (r[0] ** 2 + r[1] ** 2) ** 0.5},
            {'type': 'eq', 'fun': lambda r: r[3] / r[4] - r[0] / r[1]},
            {'type': 'eq', 'fun': lambda r: r[3] ** 2 + r[4] ** 2 - 561.418 * (r[5] + 300.7681)},
            {'type': 'ineq',
             'fun': lambda r: -((x[i] - r[0]) ** 2 + (y[i] - r[1]) ** 2 + (z[i] - r[2]) ** 2) ** 0.5 + 0.6})
        return cons


    cons = con()
    # 设置初始猜测值
    x0 = np.asarray((x[i] + 0.00000001, y[i] + 0.00000001, z[i] + 0.00000001, x[i] + 0.00000001, y[i] + 0.00000001,
                     z[i] + 0.00000001))
    res = minimize(fun(), x0, method='SLSQP', constraints=cons, options={'maxiter': 100000})
    xr.append(res.x[0])
    yr.append(res.x[1])
    zr.append(res.x[2])
    d.append(res.fun)
    # print(res.fun, i)
    if not res.success:
        print(i)
xr = np.array(xr).T
yr = np.array(yr).T
zr = np.array(zr).T
d = np.array(d).T
